//int9
breakpoint;
//save usersp
breakpoint;
alias userSP R0;
userSP=SP;

//set mode flag
[PROCESS_TABLE +[SYSTEM_STATUS_TABLE +1]*16 +9]=9;//exec system call no


[PROCESS_TABLE +([SYSTEM_STATUS_TABLE +1]*16) +13]=SP;

// Setting SP to UArea Page number * 512 - 1
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//to get name of the req file
alias filename R1;
filename = [ ([((userSP-4)/512)*2 + PTBR]*512) + ((userSP-4) % 512)];


alias i R2;
alias flag R3;
i=0;
flag=0;
while(i<MAX_FILE_NUM) do
	if([INODE_TABLE +i*16 +1]==filename && [INODE_TABLE+i*16+0]==EXEC) then
		flag=1;
		break;
	endif;
	i=i+1;
endwhile;

if(flag==0) then
	//if req file is not found in inode table
	alias physicalAddrRetVal R6;
	physicalAddrRetVal=([PTBR+2*(userSP-1)/512]*512)+((userSP-1)%512);
	[physicalAddrRetVal] = -1;
	SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
	ireturn;
	
endif;

multipush(R0,R1,R2,R3);
R1=3;//exit process
R2=[SYSTEM_STATUS_TABLE+1];
call MOD_1;//call exit fn
multipop(R0,R1,R2,R3);


[MEMORY_FREE_LIST+[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]]=1;
//increasing to indicate that given user page was released!

//DECREASE MEM FREE COUNT IN SYSTEM STATUS TABLE
[SYSTEM_STATUS_TABLE +2]=[SYSTEM_STATUS_TABLE+2]-1;


SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]*512-1;//setting sp to start of the new process having same pid


[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=RUNNING;//changing state

//update state and store inode index in process table
[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16 +7]=i;

alias ptbr R6;
ptbr=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+14];

//allocate page table for new process
//Library
[ptbr+0] = 63;
[ptbr+1] = "0100";
[ptbr+2] = 64;
[ptbr+3] = "0100";

//call get free page fn to allocate heap and stack
//heap invalid
[ptbr+4]=-1;
[ptbr+5]="0000";
[ptbr+6]=-1;
[ptbr+7]="0000";

//stack-2 page
multipush(R0,R1,R2,R3,R6);
R1=GET_FREE_PAGE;
call MOD_2;//call get free page
[ptbr+16]=R0;
[ptbr+17]="0110";


R1=GET_FREE_PAGE;
call MOD_2;//call get free page
[ptbr+18]=R0;
[ptbr+19]="0110";


R1=GET_CODE_PAGE;
R2=[INODE_TABLE + 16*i + 8];
call MOD_2;
R15=R0;

multipop(R0,R1,R2,R3,R6);

[ptbr+8]=R15;
[ptbr+9]="0100";
[ptbr+10]=-1;
[ptbr+11]="0000";
[ptbr+12]=-1;
[ptbr+13]="0000";
[ptbr+14]=-1;
[ptbr+15]="0000";

//initialise disk map table


alias j R8;
j=0;

while(j<10) do
	[DISK_MAP_TABLE +[SYSTEM_STATUS_TABLE+1]*10 +j]=-1;
	j=j+1;
endwhile;

//set values

[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + 16*i + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + 16*i + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + 16*i + 11];


//STORE entry IP value
[[ptbr+16]*512]=[[ptbr+8]*512+1];
breakpoint;
SP=8*512;
//set MODE flag
[PROCESS_TABLE +[SYSTEM_STATUS_TABLE+1]*16 +9]=0;


ireturn;





