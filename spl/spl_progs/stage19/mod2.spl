breakpoint;
alias fno R1;

if(fno==GET_FREE_PAGE)then
	breakpoint;
	//inc wait mem count+1;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
	while([SYSTEM_STATUS_TABLE+2]==0) do //mem free count==0
		[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=WAIT_MEM;
		call MOD_5;//call scheduler
	endwhile;
	
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
	//find a free page in mem free list
	
	alias i R5;
	i=76;
	while(i<128) do
		if([MEMORY_FREE_LIST+i]==0)then
			[MEMORY_FREE_LIST+i]=1;
			R0=i;
			return;
		endif;
		i=i+1;
	endwhile;
	R0=-1;
	breakpoint;
	return;
endif;

if(fno==RELEASE_PAGE) then
	//R2->PAGE TO BE RELEASED
	breakpoint;
	alias memfreed R2;
	[MEMORY_FREE_LIST+memfreed]=[MEMORY_FREE_LIST+memfreed]-1;//
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	alias j R4;
	j=0;
	while(j<MAX_PROC_NUM) do
		if(([PROCESS_TABLE+j*16+4]==WAIT_MEM))then
			[PROCESS_TABLE+j*16+4]=READY;
		endif;
		j=j+1;
	endwhile;
	breakpoint;
	return;
endif;

if(fno==GET_CODE_PAGE) then
	alias blockno R2;
	alias pid R3;
	pid=0;
	alias j R6;
	j=4;
	//check all process
	//if blockno is same and page valid
	while(pid<MAX_PROC_NUM) do
		while(j<8) do
			if ([DISK_MAP_TABLE + 10*pid + j] == blockno && [PAGE_TABLE_BASE + 20*pid + 2*j] != -1)then
			R0=[PAGE_TABLE_BASE + 20*pid + 2*j] ;
			[MEMORY_FREE_LIST+R0]=1;
			return;
			endif;
			j=j+1;
		endwhile;
		j=4;
		pid=pid+1;
	endwhile;
	multipush(R1,R2,R3,R4,R5,R6);
	R1=GET_FREE_PAGE;
	call MOD_2;
	multipop(R1,R2,R3,R4,R5,R6);
	
	//load
	alias pageno R0;
	multipush(R0,R1,R2,R3,R4,R5,R6);
	R1=DISK_LOAD;
	R3=pageno;
	R4=blockno;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5,R6);
	return;
endif;


if((fno==RELEASE_BLOCK)) then
	alias blockno R1;
	breakpoint;
	[DISK_FREE_LIST +blockno]=0;
	return;
endif;

return;
