breakpoint;
alias currentPID R0;
currentPID=[SYSTEM_STATUS_TABLE+1];

multipush(BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry+12]=SP%512;//kptr
[process_table_entry + 14]=PTBR;
 [process_table_entry + 15]=PTLR;
//switching btw processes
alias newPID R3;
alias bool R2;

bool=0;
if((bool==0))then
	newPID=currentPID+1;
	while(newPID<16) do
		if([PROCESS_TABLE + newPID*16 +4]==READY || [PROCESS_TABLE +newPID*16 +4]==CREATED) then
			bool=1;
			break;
		endif;
		newPID=newPID+1;
	endwhile;
endif;

if((bool==0)) then
	newPID=1;
	while(newPID<=currentPID) do
		if([PROCESS_TABLE + newPID*16 +4]==READY || [PROCESS_TABLE +newPID*16 +4]==CREATED) then
			bool=1;
			break;
		endif;
		newPID=newPID+1;	
	endwhile;
endif;
if((bool==0)) then
	bool=1;
	newPID=0;
endif;
//newpid 's process table entries

alias new_process_table R4;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;//page +offset
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];


[SYSTEM_STATUS_TABLE + 1] = newPID;


if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    [new_process_table + 9] = 0;//mode flag
    ireturn;
endif;

[new_process_table + 4] = RUNNING;
breakpoint;
multipop(BP);

return;
