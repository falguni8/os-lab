breakpoint;
alias fno R1;
alias currentPID R2;

if((fno==8)) then
	//acquire
	while(([TERMINAL_STATUS_TABLE]==1)) do
		//terminal is allocated
		[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;//STATUS
		multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		
		call MOD_5;//scheduler
		multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	endwhile;
	[TERMINAL_STATUS_TABLE]=1;
	[TERMINAL_STATUS_TABLE+1]=currentPID;
	breakpoint;
	return;
	
endif;

if((fno==9)) then
	//release
	if(([TERMINAL_STATUS_TABLE+1]!=currentPID)) then
		R0=-1;
		return;
	endif;
	[TERMINAL_STATUS_TABLE]=0;
	alias pid R3;
	pid=1;
	while((pid<16)) do
		if(([PROCESS_TABLE +currentPID*16 +4]==WAIT_TERMINAL))then
			[PROCESS_TABLE +currentPID*16 +4]=READY;
		endif;
		pid=pid+1;
	endwhile;
	R0=0;
	breakpoint;
	return;
endif;
		
if((fno==3))then
	while ([DISK_STATUS_TABLE]==1) do
	
		[PROCESS_TABLE+ currentPID*16+4]=WAIT_DISK;
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
		call MOD_5;			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	endwhile;
	
	[DISK_STATUS_TABLE+0]=1;
	[DISK_STATUS_TABLE+4]=currentPID;
	return;
endif;

return;
