[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 5; // doing 5th system call
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 +13] = SP; //Save user stack

alias userSP R0;
userSP = SP;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE +1]*16 + 11] * 512 - 1;

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ( (userSP-4)/512 )];
offset = (userSP-4) % 512;
fileDescPhysicalAddr = (physicalPageNum*512) + offset;
alias fileDescriptor R4;
fileDescriptor = [fileDescPhysicalAddr];

if (fileDescriptor != -2)
then
	alias physicalAddrRetVal R5;
	physicalAddrRetVal = ( [PTBR + 2 * ( (userSP-1)/512 )] * 512 + (userSP-1)%512 );
	[physicalAddrRetVal] = -1;
else
	alias word R5;
	word = [( [PTBR + 2*( (userSP-3)/512 )] * 512 + (userSP-3)%512 )];

	//print word;
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);
	R1 = 3; // function code for terminal write
	R2 = [SYSTEM_STATUS_TABLE+1]; // pid
	R3 = word;
	call MOD_4;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,R12,R13,R14,R15);

	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ( [PTBR + 2 * ( (userSP-1)/512 )] * 512 + (userSP-1)%512 );
	[physicalAddrRetVal] = 0; //return value 0 -> success
endif;

//getting user stack value
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 +13];
//mode flag to 0
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;

ireturn;


